import { HttpRequest } from '../src/http/http-request';
import type { IHttpRequest } from '../src/types';
import { HttpClientFactory } from '../src/http';

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ HttpRequest
 */
export class HttpRequestExamples {
  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ JSON –∑–∞–ø—Ä–æ—Å–∞
   */
  static jsonRequestExample(): void {
    const request: IHttpRequest = {
      url: 'https://api.example.com/users',
      method: 'POST',
      headers: {
        Authorization: 'Bearer token123',
      },
      body: {
        name: 'John Doe',
        email: 'john@example.com',
        age: 30,
      },
    };

    const httpRequest = new HttpRequest(request);

    console.log('JSON Request Example:');
    console.log('URL:', httpRequest.url);
    console.log('Method:', httpRequest.method);
    console.log('Headers:', httpRequest.headers);
    console.log('Body:', httpRequest.body);
    console.log('Fetch Init:', httpRequest.toFetchInit());
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ FormData –∑–∞–ø—Ä–æ—Å–∞
   */
  static formDataRequestExample(): void {
    const formData = new FormData();
    formData.append(
      'file',
      new Blob(['file content'], { type: 'text/plain' }),
      'test.txt',
    );
    formData.append('description', 'Test file upload');

    const request: IHttpRequest = {
      url: 'https://api.example.com/upload',
      method: 'POST',
      body: formData,
    };

    const httpRequest = new HttpRequest(request);

    console.log('FormData Request Example:');
    console.log('URL:', httpRequest.url);
    console.log('Method:', httpRequest.method);
    console.log('Headers:', httpRequest.headers);
    console.log('Body type:', httpRequest.body?.constructor.name);
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ URLSearchParams –∑–∞–ø—Ä–æ—Å–∞
   */
  static urlSearchParamsRequestExample(): void {
    const params = new URLSearchParams();
    params.append('query', 'search term');
    params.append('page', '1');
    params.append('limit', '10');

    const request: IHttpRequest = {
      url: 'https://api.example.com/search',
      method: 'POST',
      body: params,
    };

    const httpRequest = new HttpRequest(request);

    console.log('URLSearchParams Request Example:');
    console.log('URL:', httpRequest.url);
    console.log('Method:', httpRequest.method);
    console.log('Headers:', httpRequest.headers);
    console.log('Body type:', httpRequest.body?.constructor.name);
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  static stringRequestExample(): void {
    const request: IHttpRequest = {
      url: 'https://api.example.com/raw',
      method: 'POST',
      headers: {
        'Content-Type': 'text/plain',
      },
      body: 'Raw text content',
    };

    const httpRequest = new HttpRequest(request);

    console.log('String Request Example:');
    console.log('URL:', httpRequest.url);
    console.log('Method:', httpRequest.method);
    console.log('Headers:', httpRequest.headers);
    console.log('Body:', httpRequest.body);
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å retry
 */
export async function runHttpRequestExamples(): Promise<void> {
  console.log('üöÄ HTTP Client Examples\n');

  // 1. –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å retry
  console.log('1. –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å retry:');
  const basicClient = HttpClientFactory.create('fetch', {
    baseURL: 'https://httpbin.org',
    timeout: 5000,
    retry: {
      count: 3,
      delay: 1000,
    },
  });

  try {
    const response = await basicClient.get('/status/200');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', response.status);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }

  // 2. –ö–ª–∏–µ–Ω—Ç –±–µ–∑ retry
  console.log('\n2. –ö–ª–∏–µ–Ω—Ç –±–µ–∑ retry:');
  const noRetryClient = HttpClientFactory.create('fetch', {
    baseURL: 'https://httpbin.org',
    retry: {
      count: 0,
      delay: 1000,
    },
  });

  try {
    const response = await noRetryClient.get('/status/200');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', response.status);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }

  // 3. –ö–ª–∏–µ–Ω—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º retry
  console.log('\n3. –ö–ª–∏–µ–Ω—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º retry:');
  const manyRetryClient = HttpClientFactory.create('fetch', {
    baseURL: 'https://httpbin.org',
    retry: {
      count: 5,
      delay: 500,
    },
  });

  try {
    const response = await manyRetryClient.get('/status/200');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', response.status);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }

  // 4. –ó–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º retry –Ω–∞—Å—Ç—Ä–æ–µ–∫
  console.log('\n4. –ó–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º retry –Ω–∞—Å—Ç—Ä–æ–µ–∫:');
  try {
    const response = await basicClient.get(
      '/status/200',
      {},
      {
        retry: {
          count: 1,
          delay: 500,
        },
      },
    );
    console.log(
      '‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:',
      response.status,
    );
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }

  // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
  try {
    // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å retry –∏–∑-–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ 500
    await basicClient.get('/status/500');
  } catch (error) {
    console.log('‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }

  // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º:');
  const timeoutClient = HttpClientFactory.create('fetch', {
    baseURL: 'https://httpbin.org',
    timeout: 100, // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
    retry: {
      count: 2,
      delay: 1000,
    },
  });

  try {
    await timeoutClient.get('/delay/5'); // –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–π–º–µ—Ç 5 —Å–µ–∫—É–Ω–¥
  } catch (error) {
    console.log('‚ùå –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç:', error);
  }

  // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–ø—Ä–æ—Å–∞
  console.log('\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–ø—Ä–æ—Å–∞:');
  const controller = new AbortController();

  // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  setTimeout(() => {
    controller.abort();
    console.log('üõë –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
  }, 1000);

  try {
    await basicClient.get('/delay/10', { signal: controller.signal });
  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω');
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  }

  console.log('\n‚ú® –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è API
 */
export function createApiClient(baseURL: string, apiKey?: string) {
  const client = HttpClientFactory.create('fetch', {
    baseURL,
    timeout: 10000,
    defaultHeaders: {
      'Content-Type': 'application/json',
      ...(apiKey && { Authorization: `Bearer ${apiKey}` }),
    },
    retry: {
      count: 3,
      delay: 1000,
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  client.addInterceptor({
    onRequest: (request) => {
      console.log(`üöÄ ${request.method} ${request.url}`);
      return request;
    },
    onResponse: (response) => {
      console.log(`‚úÖ ${response.status} ${response.statusText}`);
      return response;
    },
    onError: (error) => {
      console.error(`‚ùå Request failed:`, error);
      return error;
    },
  });

  return client;
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function runApiClientExample(): Promise<void> {
  console.log('\nüîß API Client Example\n');

  const apiClient = createApiClient('https://httpbin.org');

  try {
    // GET –∑–∞–ø—Ä–æ—Å
    const users = await apiClient.get('/json');
    console.log('Users data:', users.data);

    // POST –∑–∞–ø—Ä–æ—Å
    const newUser = await apiClient.post('/post', {
      name: 'John Doe',
      email: 'john@example.com',
    });
    console.log('Created user:', newUser.data);

    // PUT –∑–∞–ø—Ä–æ—Å
    const updatedUser = await apiClient.put('/put', {
      name: 'Jane Doe',
      email: 'jane@example.com',
    });
    console.log('Updated user:', updatedUser.data);

    // DELETE –∑–∞–ø—Ä–æ—Å
    await apiClient.delete('/delete');
    console.log('User deleted successfully');
  } catch (error) {
    console.error('API Error:', error);
  }
}
