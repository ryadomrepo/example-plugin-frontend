/**
 * Функция для создания коллекции имен событий, которые отправляются хост-приложением для коммуникации с плагинами.
 *
 * @description
 * Эти события используются для однонаправленной коммуникации от хост-приложения к плагинам.
 * Каждое событие имеет префикс, соответствующий области плагина,
 * что позволяет избежать конфликтов имен между разными плагинами.
 *
 * Формат имени события: `host:${area}:${eventName}`
 * - `host` - фиксированный префикс, указывающий на источник события (хост-приложение)
 * - `${area}` - область встраивания плагина
 * - `${eventName}` - название конкретного события
 *
 * @param area - Область встраивания плагина
 * @returns Объект с именами событий хоста
 *
 * @example
 * ```typescript
 * const HOST_EVENT_NAMES = createHostEventNames('my-plugin-area');
 *
 * // Подписка на событие готовности хоста
 * window.addEventListener(HOST_EVENT_NAMES.READY, () => {
 *   console.log('Хост-приложение готово к работе с плагином');
 * });
 *
 * // Пример полного имени события:
 * // host:my-plugin-area:ready
 * ```
 */
export const createHostEventNames = (area: string) =>
  ({
    /** Событие, отправляемое когда хост-приложение готово принимать сообщения от плагинов */
    READY: `host:${area}:ready`,
    /** Событие, отправляемое когда хост-приложение обновляется */
    UPDATE: `host:${area}:update`,
    /** Событие, отправляемое когда хост-приложение завершает работу */
    SHUTDOWN: `host:${area}:shutdown`,
  }) as const;

/**
 * Функция для создания коллекции имен событий, которые отправляются плагинами для коммуникации с хост-приложением.
 *
 * @description
 * Эти события используются для однонаправленной коммуникации от плагинов к хост-приложению.
 * Каждое событие имеет префикс, соответствующий области плагина,
 * что позволяет хосту различать события от разных плагинов и обрабатывать их соответственно.
 *
 * Формат имени события: `plugin:${area}:${eventName}`
 * - `plugin` - фиксированный префикс, указывающий на источник события (плагин)
 * - `${area}` - область встраивания плагина
 * - `${eventName}` - название конкретного события
 *
 * @param area - Область встраивания плагина
 * @returns Объект с именами событий плагина
 *
 * @example
 * ```typescript
 * const PLUGIN_EVENT_NAMES = createPluginEventNames('my-plugin-area');
 *
 * // Отправка события готовности плагина
 * window.dispatchEvent(new CustomEvent(PLUGIN_EVENT_NAMES.READY, {
 *   detail: { version: '1.0.0' }
 * }));
 *
 * // Пример полного имени события:
 * // plugin:my-plugin-area:ready
 * ```
 */
export const createPluginEventNames = (area: string) =>
  ({
    /** Событие, отправляемое когда плагин инициализирован и готов принимать сообщения от хоста */
    READY: `plugin:${area}:ready`,
    /** Событие, отправляемое когда плагин обновляется */
    UPDATE: `plugin:${area}:update`,
    /** Событие, отправляемое когда плагин завершает работу */
    SHUTDOWN: `plugin:${area}:shutdown`,
  }) as const;

/**
 * Типы для событий хоста и плагина
 * Используются для типизации в приложениях плагинов
 */
export type THostEventNames = ReturnType<typeof createHostEventNames>;
export type TPluginEventNames = ReturnType<typeof createPluginEventNames>;
